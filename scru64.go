// SCRU64: Sortable, Clock-based, Realm-specifically Unique identifier
//
// SCRU64 ID offers compact, time-ordered unique identifiers generated by
// distributed nodes. SCRU64 has the following features:
//
//   - ~62-bit non-negative integer storable as signed/unsigned 64-bit integer
//   - Sortable by generation time (as integer and as text)
//   - 12-digit case-insensitive textual representation (Base36)
//   - ~38-bit Unix epoch-based timestamp that ensures useful life until year 4261
//   - Variable-length node/machine ID and counter fields that share 24 bits
//
// See SCRU64 Specification for details: https://github.com/scru64/spec
package scru64

// The total size in bits of the `nodeId` and `counter` fields.
const nodeCtrSize uint8 = 24

// Generates a new SCRU64 ID object using the global generator.
//
// The [GlobalGenerator] reads the node configuration from the
// `SCRU64_NODE_SPEC` environment variable by default, and it panics if it fails
// to read a well-formed node spec string (e.g., `"42/8"`, `"0xb00/12"`,
// `"0u2r85hm2pt3/16"`) when a generator method is first called. See also
// [NodeSpec] for the node spec string format.
//
// This function usually returns a value immediately, but if not possible, it
// sleeps and waits for the next timestamp tick.
//
// This function is thread-safe; multiple threads can call it concurrently.
//
// This function panics if the global generator is not properly configured.
func New() Id {
	return GlobalGenerator.GenerateOrSleep()
}

// Generates a new SCRU64 ID encoded in the 12-digit canonical string
// representation using the global generator.
//
// The [GlobalGenerator] reads the node configuration from the
// `SCRU64_NODE_SPEC` environment variable by default, and it panics if it fails
// to read a well-formed node spec string (e.g., `"42/8"`, `"0xb00/12"`,
// `"0u2r85hm2pt3/16"`) when a generator method is first called. See also
// [NodeSpec] for the node spec string format.
//
// This function usually returns a value immediately, but if not possible, it
// sleeps and waits for the next timestamp tick.
//
// This function is thread-safe; multiple threads can call it concurrently.
//
// This function panics if the global generator is not properly configured.
func NewString() string {
	return New().String()
}
